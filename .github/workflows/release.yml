name: Create Release

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version increment type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      custom_version:
        description: 'Custom version (optional, overrides version_type)'
        required: false
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        default: false
        type: boolean

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Setup Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
      - name: Calculate next version
        id: version
        run: |
          # Get the latest tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "Latest tag: $LATEST_TAG"
          
          if [ -n "${{ github.event.inputs.custom_version }}" ]; then
            NEW_VERSION="${{ github.event.inputs.custom_version }}"
            if [[ ! $NEW_VERSION =~ ^v ]]; then
              NEW_VERSION="v$NEW_VERSION"
            fi
          else
            # Parse version numbers
            VERSION_PART=${LATEST_TAG#v}
            IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION_PART"
            
            case "${{ github.event.inputs.version_type }}" in
              "major")
                MAJOR=$((MAJOR + 1))
                MINOR=0
                PATCH=0
                ;;
              "minor")
                MINOR=$((MINOR + 1))
                PATCH=0
                ;;
              "patch")
                PATCH=$((PATCH + 1))
                ;;
            esac
            
            NEW_VERSION="v${MAJOR}.${MINOR}.${PATCH}"
          fi
          
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "tag=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "New version: $NEW_VERSION"
          
      - name: Update version in project files
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          VERSION_NO_V="${VERSION#v}"
          
          # Update wails.json
          if [ -f "wails.json" ]; then
            sed -i "s/\"productVersion\": \".*\"/\"productVersion\": \"$VERSION_NO_V\"/" wails.json
          fi
          
          # Update build.ps1
          if [ -f "build.ps1" ]; then
            sed -i "s/\$VERSION = \".*\"/\$VERSION = \"$VERSION_NO_V\"/" build.ps1
          fi
          
          # Update CLAUDE.md if it has version references
          if [ -f "CLAUDE.md" ] && grep -q "Version" CLAUDE.md; then
            sed -i "s/Version [0-9]\+\.[0-9]\+\.[0-9]\+/Version $VERSION_NO_V/g" CLAUDE.md
          fi
          
      - name: Commit version updates
        run: |
          git add -A
          git commit -m "chore: bump version to ${{ steps.version.outputs.version }}" || echo "No changes to commit"
          
      - name: Create and push tag
        run: |
          git tag -a "${{ steps.version.outputs.tag }}" -m "Release ${{ steps.version.outputs.version }}"
          git push origin "${{ steps.version.outputs.tag }}"
          git push origin main

  build-release:
    needs: create-release
    uses: ./.github/workflows/build.yml
    with:
      version: ${{ needs.create-release.outputs.version }}

  publish-release:
    needs: [create-release, build-release]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.create-release.outputs.tag }}
          
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          
      - name: Prepare release notes
        id: release_notes
        run: |
          # Generate release notes from commits since last release
          LAST_RELEASE=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
          
          if [ -n "$LAST_RELEASE" ]; then
            echo "## What's Changed" > release_notes.md
            echo "" >> release_notes.md
            git log $LAST_RELEASE..HEAD --pretty=format:"- %s" --grep="^feat" --grep="^fix" --grep="^chore" >> release_notes.md || echo "- Initial release" >> release_notes.md
            echo "" >> release_notes.md
            echo "" >> release_notes.md
            echo "## Full Changelog" >> release_notes.md
            echo "https://github.com/${{ github.repository }}/compare/$LAST_RELEASE...${{ needs.create-release.outputs.tag }}" >> release_notes.md
          else
            echo "## Initial Release" > release_notes.md
            echo "" >> release_notes.md
            echo "First release of Dockerizathinginator v2.0 - Now built with Wails, Go, and Ansible!" >> release_notes.md
          fi
          
      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          find artifacts -name "*.tar.gz" -o -name "*.zip" | while read file; do
            cp "$file" release-assets/
          done
          
          # Create checksums
          cd release-assets
          sha256sum * > checksums.txt
          cd ..
          
          ls -la release-assets/
          
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.create-release.outputs.tag }}
          name: Dockerizathinginator ${{ needs.create-release.outputs.version }}
          body_path: release_notes.md
          draft: false
          prerelease: ${{ github.event.inputs.prerelease == 'true' }}
          files: |
            release-assets/*
          generate_release_notes: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Update latest release pointer
        if: github.event.inputs.prerelease != 'true'
        run: |
          # Create/update a 'latest' tag pointing to this release
          git tag -f latest
          git push -f origin latest