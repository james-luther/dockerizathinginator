name: Maintenance and Dependency Updates

on:
  schedule:
    # Run on the 15th of each month at 3 AM UTC for dependency updates
    - cron: '0 3 15 * *'
  workflow_dispatch:
    inputs:
      force_update:
        description: 'Force dependency update even if no changes'
        required: false
        default: false
        type: boolean

jobs:
  check-dependencies:
    runs-on: ubuntu-latest
    outputs:
      has_updates: ${{ steps.check.outputs.has_updates }}
      go_updates: ${{ steps.check.outputs.go_updates }}
      wails_updates: ${{ steps.check.outputs.wails_updates }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
          
      - name: Check for Go module updates
        id: check
        run: |
          # Check for Go module updates
          go list -u -m all > current_deps.txt
          
          # Check if go.mod needs updates
          go mod tidy
          
          # Check for Wails updates
          LATEST_WAILS=$(git ls-remote --tags --sort='version:refname' https://github.com/wailsapp/wails.git | grep -E 'v2\.[0-9]+\.[0-9]+$' | tail -1 | sed 's/.*\///g')
          CURRENT_WAILS=$(grep "github.com/wailsapp/wails/v2" go.mod | awk '{print $2}')
          
          echo "Current Wails: $CURRENT_WAILS"
          echo "Latest Wails: $LATEST_WAILS"
          
          HAS_UPDATES=false
          GO_UPDATES=""
          WAILS_UPDATES=""
          
          # Check if go.mod was modified
          if ! git diff --quiet go.mod go.sum 2>/dev/null; then
            HAS_UPDATES=true
            GO_UPDATES="Go modules updated"
          fi
          
          # Check Wails version
          if [ "$CURRENT_WAILS" != "$LATEST_WAILS" ] && [ -n "$LATEST_WAILS" ]; then
            HAS_UPDATES=true
            WAILS_UPDATES="Wails $CURRENT_WAILS -> $LATEST_WAILS"
          fi
          
          # Force update if requested
          if [ "${{ github.event.inputs.force_update }}" = "true" ]; then
            HAS_UPDATES=true
          fi
          
          echo "has_updates=$HAS_UPDATES" >> $GITHUB_OUTPUT
          echo "go_updates=$GO_UPDATES" >> $GITHUB_OUTPUT
          echo "wails_updates=$WAILS_UPDATES" >> $GITHUB_OUTPUT
          
          echo "Has updates: $HAS_UPDATES"

  update-dependencies:
    needs: check-dependencies
    if: needs.check-dependencies.outputs.has_updates == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
          
      - name: Update dependencies
        run: |
          # Update Go modules
          go get -u ./...
          go mod tidy
          
          # Update Wails if needed
          if [ -n "${{ needs.check-dependencies.outputs.wails_updates }}" ]; then
            LATEST_WAILS=$(git ls-remote --tags --sort='version:refname' https://github.com/wailsapp/wails.git | grep -E 'v2\.[0-9]+\.[0-9]+$' | tail -1 | sed 's/.*\///g')
            if [ -n "$LATEST_WAILS" ]; then
              go get github.com/wailsapp/wails/v2@$LATEST_WAILS
              go mod tidy
            fi
          fi
          
      - name: Test build after updates
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential pkg-config libwebkit2gtk-4.1-dev
          go install github.com/wailsapp/wails/v2/cmd/wails@latest
          wails build -clean
          
      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: |
            chore: update dependencies
            
            ${{ needs.check-dependencies.outputs.go_updates }}
            ${{ needs.check-dependencies.outputs.wails_updates }}
          title: 'chore: monthly dependency updates'
          body: |
            ## Monthly Dependency Updates
            
            This PR contains automated dependency updates:
            
            **Go Modules:**
            ${{ needs.check-dependencies.outputs.go_updates }}
            
            **Wails Framework:**
            ${{ needs.check-dependencies.outputs.wails_updates }}
            
            **Testing:**
            - ✅ Build test passed on Linux
            - ⏳ Cross-platform builds will be tested after merge
            
            Auto-generated by maintenance workflow.
          branch: chore/dependency-updates
          delete-branch: true

  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
          
      - name: Run Gosec Security Scanner
        uses: securecodewarrior/github-action-gosec@master
        with:
          args: '-fmt sarif -out gosec.sarif ./...'
        continue-on-error: true
        
      - name: Upload Gosec results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: gosec.sarif
        if: always()

  cleanup-old-artifacts:
    runs-on: ubuntu-latest
    steps:
      - name: Cleanup old artifacts
        uses: actions/github-script@v7
        with:
          script: |
            const artifacts = await github.rest.actions.listArtifactsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 100
            });
            
            const cutoff = new Date();
            cutoff.setDate(cutoff.getDate() - 90); // Keep artifacts for 90 days
            
            for (const artifact of artifacts.data.artifacts) {
              if (new Date(artifact.created_at) < cutoff) {
                console.log(`Deleting artifact: ${artifact.name} (${artifact.created_at})`);
                await github.rest.actions.deleteArtifact({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  artifact_id: artifact.id
                });
              }
            }